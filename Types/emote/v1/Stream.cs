// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: emote/v1/stream.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Harmony.Emote.V1 {

  /// <summary>Holder for reflection information generated from emote/v1/stream.proto</summary>
  public static partial class StreamReflection {

    #region Descriptor
    /// <summary>File descriptor for emote/v1/stream.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static StreamReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVlbW90ZS92MS9zdHJlYW0ucHJvdG8SEXByb3RvY29sLmVtb3RlLnYxGhRl",
            "bW90ZS92MS90eXBlcy5wcm90byJRChBFbW90ZVBhY2tVcGRhdGVkEg8KB3Bh",
            "Y2tfaWQYASABKAQSGgoNbmV3X3BhY2tfbmFtZRgCIAEoCUgAiAEBQhAKDl9u",
            "ZXdfcGFja19uYW1lIiMKEEVtb3RlUGFja0RlbGV0ZWQSDwoHcGFja19pZBgB",
            "IAEoBCI8Cg5FbW90ZVBhY2tBZGRlZBIqCgRwYWNrGAEgASgLMhwucHJvdG9j",
            "b2wuZW1vdGUudjEuRW1vdGVQYWNrInEKFkVtb3RlUGFja0Vtb3Rlc1VwZGF0",
            "ZWQSDwoHcGFja19pZBgBIAEoBBIuCgxhZGRlZF9lbW90ZXMYAiADKAsyGC5w",
            "cm90b2NvbC5lbW90ZS52MS5FbW90ZRIWCg5kZWxldGVkX2Vtb3RlcxgDIAMo",
            "CSKrAgoLU3RyZWFtRXZlbnQSPQoQZW1vdGVfcGFja19hZGRlZBgBIAEoCzIh",
            "LnByb3RvY29sLmVtb3RlLnYxLkVtb3RlUGFja0FkZGVkSAASQQoSZW1vdGVf",
            "cGFja191cGRhdGVkGAIgASgLMiMucHJvdG9jb2wuZW1vdGUudjEuRW1vdGVQ",
            "YWNrVXBkYXRlZEgAEkEKEmVtb3RlX3BhY2tfZGVsZXRlZBgDIAEoCzIjLnBy",
            "b3RvY29sLmVtb3RlLnYxLkVtb3RlUGFja0RlbGV0ZWRIABJOChllbW90ZV9w",
            "YWNrX2Vtb3Rlc191cGRhdGVkGAQgASgLMikucHJvdG9jb2wuZW1vdGUudjEu",
            "RW1vdGVQYWNrRW1vdGVzVXBkYXRlZEgAQgcKBWV2ZW50YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Harmony.Emote.V1.TypesReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Harmony.Emote.V1.EmotePackUpdated), global::Harmony.Emote.V1.EmotePackUpdated.Parser, new[]{ "PackId", "NewPackName" }, new[]{ "NewPackName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Harmony.Emote.V1.EmotePackDeleted), global::Harmony.Emote.V1.EmotePackDeleted.Parser, new[]{ "PackId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Harmony.Emote.V1.EmotePackAdded), global::Harmony.Emote.V1.EmotePackAdded.Parser, new[]{ "Pack" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Harmony.Emote.V1.EmotePackEmotesUpdated), global::Harmony.Emote.V1.EmotePackEmotesUpdated.Parser, new[]{ "PackId", "AddedEmotes", "DeletedEmotes" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Harmony.Emote.V1.StreamEvent), global::Harmony.Emote.V1.StreamEvent.Parser, new[]{ "EmotePackAdded", "EmotePackUpdated", "EmotePackDeleted", "EmotePackEmotesUpdated" }, new[]{ "Event" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Event sent when an emote pack's information is changed.
  ///
  /// Should only be sent to users who have the pack equipped.
  /// </summary>
  public sealed partial class EmotePackUpdated : pb::IMessage<EmotePackUpdated>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EmotePackUpdated> _parser = new pb::MessageParser<EmotePackUpdated>(() => new EmotePackUpdated());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EmotePackUpdated> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Harmony.Emote.V1.StreamReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmotePackUpdated() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmotePackUpdated(EmotePackUpdated other) : this() {
      packId_ = other.packId_;
      newPackName_ = other.newPackName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmotePackUpdated Clone() {
      return new EmotePackUpdated(this);
    }

    /// <summary>Field number for the "pack_id" field.</summary>
    public const int PackIdFieldNumber = 1;
    private ulong packId_;
    /// <summary>
    /// ID of the pack that was updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PackId {
      get { return packId_; }
      set {
        packId_ = value;
      }
    }

    /// <summary>Field number for the "new_pack_name" field.</summary>
    public const int NewPackNameFieldNumber = 2;
    private string newPackName_;
    /// <summary>
    /// New pack name of the pack.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NewPackName {
      get { return newPackName_ ?? ""; }
      set {
        newPackName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "new_pack_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNewPackName {
      get { return newPackName_ != null; }
    }
    /// <summary>Clears the value of the "new_pack_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNewPackName() {
      newPackName_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EmotePackUpdated);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EmotePackUpdated other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PackId != other.PackId) return false;
      if (NewPackName != other.NewPackName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PackId != 0UL) hash ^= PackId.GetHashCode();
      if (HasNewPackName) hash ^= NewPackName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PackId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PackId);
      }
      if (HasNewPackName) {
        output.WriteRawTag(18);
        output.WriteString(NewPackName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PackId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PackId);
      }
      if (HasNewPackName) {
        output.WriteRawTag(18);
        output.WriteString(NewPackName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PackId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PackId);
      }
      if (HasNewPackName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NewPackName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EmotePackUpdated other) {
      if (other == null) {
        return;
      }
      if (other.PackId != 0UL) {
        PackId = other.PackId;
      }
      if (other.HasNewPackName) {
        NewPackName = other.NewPackName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PackId = input.ReadUInt64();
            break;
          }
          case 18: {
            NewPackName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PackId = input.ReadUInt64();
            break;
          }
          case 18: {
            NewPackName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Event sent when an emote pack is deleted.
  ///
  /// Should only be sent to users who have the pack equipped.
  /// Should also be sent if a user dequips an emote pack, only to the user that dequipped it.
  /// </summary>
  public sealed partial class EmotePackDeleted : pb::IMessage<EmotePackDeleted>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EmotePackDeleted> _parser = new pb::MessageParser<EmotePackDeleted>(() => new EmotePackDeleted());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EmotePackDeleted> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Harmony.Emote.V1.StreamReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmotePackDeleted() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmotePackDeleted(EmotePackDeleted other) : this() {
      packId_ = other.packId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmotePackDeleted Clone() {
      return new EmotePackDeleted(this);
    }

    /// <summary>Field number for the "pack_id" field.</summary>
    public const int PackIdFieldNumber = 1;
    private ulong packId_;
    /// <summary>
    /// ID of the pack that was deleted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PackId {
      get { return packId_; }
      set {
        packId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EmotePackDeleted);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EmotePackDeleted other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PackId != other.PackId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PackId != 0UL) hash ^= PackId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PackId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PackId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PackId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PackId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PackId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PackId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EmotePackDeleted other) {
      if (other == null) {
        return;
      }
      if (other.PackId != 0UL) {
        PackId = other.PackId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PackId = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PackId = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Event sent when an emote pack is added.
  ///
  /// Should only be sent to the user who equipped the pack.
  /// </summary>
  public sealed partial class EmotePackAdded : pb::IMessage<EmotePackAdded>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EmotePackAdded> _parser = new pb::MessageParser<EmotePackAdded>(() => new EmotePackAdded());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EmotePackAdded> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Harmony.Emote.V1.StreamReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmotePackAdded() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmotePackAdded(EmotePackAdded other) : this() {
      pack_ = other.pack_ != null ? other.pack_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmotePackAdded Clone() {
      return new EmotePackAdded(this);
    }

    /// <summary>Field number for the "pack" field.</summary>
    public const int PackFieldNumber = 1;
    private global::Harmony.Emote.V1.EmotePack pack_;
    /// <summary>
    /// Emote pack that was equipped by the user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Harmony.Emote.V1.EmotePack Pack {
      get { return pack_; }
      set {
        pack_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EmotePackAdded);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EmotePackAdded other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pack, other.Pack)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pack_ != null) hash ^= Pack.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (pack_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pack);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (pack_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pack);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pack);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EmotePackAdded other) {
      if (other == null) {
        return;
      }
      if (other.pack_ != null) {
        if (pack_ == null) {
          Pack = new global::Harmony.Emote.V1.EmotePack();
        }
        Pack.MergeFrom(other.Pack);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (pack_ == null) {
              Pack = new global::Harmony.Emote.V1.EmotePack();
            }
            input.ReadMessage(Pack);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (pack_ == null) {
              Pack = new global::Harmony.Emote.V1.EmotePack();
            }
            input.ReadMessage(Pack);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Event sent when an emote pack's emotes were changed.
  ///
  /// Should only be sent to users who have the pack equipped.
  /// </summary>
  public sealed partial class EmotePackEmotesUpdated : pb::IMessage<EmotePackEmotesUpdated>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EmotePackEmotesUpdated> _parser = new pb::MessageParser<EmotePackEmotesUpdated>(() => new EmotePackEmotesUpdated());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EmotePackEmotesUpdated> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Harmony.Emote.V1.StreamReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmotePackEmotesUpdated() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmotePackEmotesUpdated(EmotePackEmotesUpdated other) : this() {
      packId_ = other.packId_;
      addedEmotes_ = other.addedEmotes_.Clone();
      deletedEmotes_ = other.deletedEmotes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmotePackEmotesUpdated Clone() {
      return new EmotePackEmotesUpdated(this);
    }

    /// <summary>Field number for the "pack_id" field.</summary>
    public const int PackIdFieldNumber = 1;
    private ulong packId_;
    /// <summary>
    /// ID of the pack to update the emotes of.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PackId {
      get { return packId_; }
      set {
        packId_ = value;
      }
    }

    /// <summary>Field number for the "added_emotes" field.</summary>
    public const int AddedEmotesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Harmony.Emote.V1.Emote> _repeated_addedEmotes_codec
        = pb::FieldCodec.ForMessage(18, global::Harmony.Emote.V1.Emote.Parser);
    private readonly pbc::RepeatedField<global::Harmony.Emote.V1.Emote> addedEmotes_ = new pbc::RepeatedField<global::Harmony.Emote.V1.Emote>();
    /// <summary>
    /// The added emotes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Harmony.Emote.V1.Emote> AddedEmotes {
      get { return addedEmotes_; }
    }

    /// <summary>Field number for the "deleted_emotes" field.</summary>
    public const int DeletedEmotesFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_deletedEmotes_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> deletedEmotes_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The names of the deleted emotes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DeletedEmotes {
      get { return deletedEmotes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EmotePackEmotesUpdated);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EmotePackEmotesUpdated other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PackId != other.PackId) return false;
      if(!addedEmotes_.Equals(other.addedEmotes_)) return false;
      if(!deletedEmotes_.Equals(other.deletedEmotes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PackId != 0UL) hash ^= PackId.GetHashCode();
      hash ^= addedEmotes_.GetHashCode();
      hash ^= deletedEmotes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PackId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PackId);
      }
      addedEmotes_.WriteTo(output, _repeated_addedEmotes_codec);
      deletedEmotes_.WriteTo(output, _repeated_deletedEmotes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PackId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PackId);
      }
      addedEmotes_.WriteTo(ref output, _repeated_addedEmotes_codec);
      deletedEmotes_.WriteTo(ref output, _repeated_deletedEmotes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PackId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PackId);
      }
      size += addedEmotes_.CalculateSize(_repeated_addedEmotes_codec);
      size += deletedEmotes_.CalculateSize(_repeated_deletedEmotes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EmotePackEmotesUpdated other) {
      if (other == null) {
        return;
      }
      if (other.PackId != 0UL) {
        PackId = other.PackId;
      }
      addedEmotes_.Add(other.addedEmotes_);
      deletedEmotes_.Add(other.deletedEmotes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PackId = input.ReadUInt64();
            break;
          }
          case 18: {
            addedEmotes_.AddEntriesFrom(input, _repeated_addedEmotes_codec);
            break;
          }
          case 26: {
            deletedEmotes_.AddEntriesFrom(input, _repeated_deletedEmotes_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PackId = input.ReadUInt64();
            break;
          }
          case 18: {
            addedEmotes_.AddEntriesFrom(ref input, _repeated_addedEmotes_codec);
            break;
          }
          case 26: {
            deletedEmotes_.AddEntriesFrom(ref input, _repeated_deletedEmotes_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Describes an emote service event.
  /// </summary>
  public sealed partial class StreamEvent : pb::IMessage<StreamEvent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StreamEvent> _parser = new pb::MessageParser<StreamEvent>(() => new StreamEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StreamEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Harmony.Emote.V1.StreamReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamEvent(StreamEvent other) : this() {
      switch (other.EventCase) {
        case EventOneofCase.EmotePackAdded:
          EmotePackAdded = other.EmotePackAdded.Clone();
          break;
        case EventOneofCase.EmotePackUpdated:
          EmotePackUpdated = other.EmotePackUpdated.Clone();
          break;
        case EventOneofCase.EmotePackDeleted:
          EmotePackDeleted = other.EmotePackDeleted.Clone();
          break;
        case EventOneofCase.EmotePackEmotesUpdated:
          EmotePackEmotesUpdated = other.EmotePackEmotesUpdated.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamEvent Clone() {
      return new StreamEvent(this);
    }

    /// <summary>Field number for the "emote_pack_added" field.</summary>
    public const int EmotePackAddedFieldNumber = 1;
    /// <summary>
    /// Send the emote pack added event.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Harmony.Emote.V1.EmotePackAdded EmotePackAdded {
      get { return eventCase_ == EventOneofCase.EmotePackAdded ? (global::Harmony.Emote.V1.EmotePackAdded) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.EmotePackAdded;
      }
    }

    /// <summary>Field number for the "emote_pack_updated" field.</summary>
    public const int EmotePackUpdatedFieldNumber = 2;
    /// <summary>
    /// Send the emote pack updated event.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Harmony.Emote.V1.EmotePackUpdated EmotePackUpdated {
      get { return eventCase_ == EventOneofCase.EmotePackUpdated ? (global::Harmony.Emote.V1.EmotePackUpdated) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.EmotePackUpdated;
      }
    }

    /// <summary>Field number for the "emote_pack_deleted" field.</summary>
    public const int EmotePackDeletedFieldNumber = 3;
    /// <summary>
    /// Send the emote pack deleted event.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Harmony.Emote.V1.EmotePackDeleted EmotePackDeleted {
      get { return eventCase_ == EventOneofCase.EmotePackDeleted ? (global::Harmony.Emote.V1.EmotePackDeleted) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.EmotePackDeleted;
      }
    }

    /// <summary>Field number for the "emote_pack_emotes_updated" field.</summary>
    public const int EmotePackEmotesUpdatedFieldNumber = 4;
    /// <summary>
    /// Send the emote pack emotes updated event.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Harmony.Emote.V1.EmotePackEmotesUpdated EmotePackEmotesUpdated {
      get { return eventCase_ == EventOneofCase.EmotePackEmotesUpdated ? (global::Harmony.Emote.V1.EmotePackEmotesUpdated) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.EmotePackEmotesUpdated;
      }
    }

    private object event_;
    /// <summary>Enum of possible cases for the "event" oneof.</summary>
    public enum EventOneofCase {
      None = 0,
      EmotePackAdded = 1,
      EmotePackUpdated = 2,
      EmotePackDeleted = 3,
      EmotePackEmotesUpdated = 4,
    }
    private EventOneofCase eventCase_ = EventOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventOneofCase EventCase {
      get { return eventCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEvent() {
      eventCase_ = EventOneofCase.None;
      event_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StreamEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StreamEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(EmotePackAdded, other.EmotePackAdded)) return false;
      if (!object.Equals(EmotePackUpdated, other.EmotePackUpdated)) return false;
      if (!object.Equals(EmotePackDeleted, other.EmotePackDeleted)) return false;
      if (!object.Equals(EmotePackEmotesUpdated, other.EmotePackEmotesUpdated)) return false;
      if (EventCase != other.EventCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (eventCase_ == EventOneofCase.EmotePackAdded) hash ^= EmotePackAdded.GetHashCode();
      if (eventCase_ == EventOneofCase.EmotePackUpdated) hash ^= EmotePackUpdated.GetHashCode();
      if (eventCase_ == EventOneofCase.EmotePackDeleted) hash ^= EmotePackDeleted.GetHashCode();
      if (eventCase_ == EventOneofCase.EmotePackEmotesUpdated) hash ^= EmotePackEmotesUpdated.GetHashCode();
      hash ^= (int) eventCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (eventCase_ == EventOneofCase.EmotePackAdded) {
        output.WriteRawTag(10);
        output.WriteMessage(EmotePackAdded);
      }
      if (eventCase_ == EventOneofCase.EmotePackUpdated) {
        output.WriteRawTag(18);
        output.WriteMessage(EmotePackUpdated);
      }
      if (eventCase_ == EventOneofCase.EmotePackDeleted) {
        output.WriteRawTag(26);
        output.WriteMessage(EmotePackDeleted);
      }
      if (eventCase_ == EventOneofCase.EmotePackEmotesUpdated) {
        output.WriteRawTag(34);
        output.WriteMessage(EmotePackEmotesUpdated);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (eventCase_ == EventOneofCase.EmotePackAdded) {
        output.WriteRawTag(10);
        output.WriteMessage(EmotePackAdded);
      }
      if (eventCase_ == EventOneofCase.EmotePackUpdated) {
        output.WriteRawTag(18);
        output.WriteMessage(EmotePackUpdated);
      }
      if (eventCase_ == EventOneofCase.EmotePackDeleted) {
        output.WriteRawTag(26);
        output.WriteMessage(EmotePackDeleted);
      }
      if (eventCase_ == EventOneofCase.EmotePackEmotesUpdated) {
        output.WriteRawTag(34);
        output.WriteMessage(EmotePackEmotesUpdated);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (eventCase_ == EventOneofCase.EmotePackAdded) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EmotePackAdded);
      }
      if (eventCase_ == EventOneofCase.EmotePackUpdated) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EmotePackUpdated);
      }
      if (eventCase_ == EventOneofCase.EmotePackDeleted) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EmotePackDeleted);
      }
      if (eventCase_ == EventOneofCase.EmotePackEmotesUpdated) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EmotePackEmotesUpdated);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StreamEvent other) {
      if (other == null) {
        return;
      }
      switch (other.EventCase) {
        case EventOneofCase.EmotePackAdded:
          if (EmotePackAdded == null) {
            EmotePackAdded = new global::Harmony.Emote.V1.EmotePackAdded();
          }
          EmotePackAdded.MergeFrom(other.EmotePackAdded);
          break;
        case EventOneofCase.EmotePackUpdated:
          if (EmotePackUpdated == null) {
            EmotePackUpdated = new global::Harmony.Emote.V1.EmotePackUpdated();
          }
          EmotePackUpdated.MergeFrom(other.EmotePackUpdated);
          break;
        case EventOneofCase.EmotePackDeleted:
          if (EmotePackDeleted == null) {
            EmotePackDeleted = new global::Harmony.Emote.V1.EmotePackDeleted();
          }
          EmotePackDeleted.MergeFrom(other.EmotePackDeleted);
          break;
        case EventOneofCase.EmotePackEmotesUpdated:
          if (EmotePackEmotesUpdated == null) {
            EmotePackEmotesUpdated = new global::Harmony.Emote.V1.EmotePackEmotesUpdated();
          }
          EmotePackEmotesUpdated.MergeFrom(other.EmotePackEmotesUpdated);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Harmony.Emote.V1.EmotePackAdded subBuilder = new global::Harmony.Emote.V1.EmotePackAdded();
            if (eventCase_ == EventOneofCase.EmotePackAdded) {
              subBuilder.MergeFrom(EmotePackAdded);
            }
            input.ReadMessage(subBuilder);
            EmotePackAdded = subBuilder;
            break;
          }
          case 18: {
            global::Harmony.Emote.V1.EmotePackUpdated subBuilder = new global::Harmony.Emote.V1.EmotePackUpdated();
            if (eventCase_ == EventOneofCase.EmotePackUpdated) {
              subBuilder.MergeFrom(EmotePackUpdated);
            }
            input.ReadMessage(subBuilder);
            EmotePackUpdated = subBuilder;
            break;
          }
          case 26: {
            global::Harmony.Emote.V1.EmotePackDeleted subBuilder = new global::Harmony.Emote.V1.EmotePackDeleted();
            if (eventCase_ == EventOneofCase.EmotePackDeleted) {
              subBuilder.MergeFrom(EmotePackDeleted);
            }
            input.ReadMessage(subBuilder);
            EmotePackDeleted = subBuilder;
            break;
          }
          case 34: {
            global::Harmony.Emote.V1.EmotePackEmotesUpdated subBuilder = new global::Harmony.Emote.V1.EmotePackEmotesUpdated();
            if (eventCase_ == EventOneofCase.EmotePackEmotesUpdated) {
              subBuilder.MergeFrom(EmotePackEmotesUpdated);
            }
            input.ReadMessage(subBuilder);
            EmotePackEmotesUpdated = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Harmony.Emote.V1.EmotePackAdded subBuilder = new global::Harmony.Emote.V1.EmotePackAdded();
            if (eventCase_ == EventOneofCase.EmotePackAdded) {
              subBuilder.MergeFrom(EmotePackAdded);
            }
            input.ReadMessage(subBuilder);
            EmotePackAdded = subBuilder;
            break;
          }
          case 18: {
            global::Harmony.Emote.V1.EmotePackUpdated subBuilder = new global::Harmony.Emote.V1.EmotePackUpdated();
            if (eventCase_ == EventOneofCase.EmotePackUpdated) {
              subBuilder.MergeFrom(EmotePackUpdated);
            }
            input.ReadMessage(subBuilder);
            EmotePackUpdated = subBuilder;
            break;
          }
          case 26: {
            global::Harmony.Emote.V1.EmotePackDeleted subBuilder = new global::Harmony.Emote.V1.EmotePackDeleted();
            if (eventCase_ == EventOneofCase.EmotePackDeleted) {
              subBuilder.MergeFrom(EmotePackDeleted);
            }
            input.ReadMessage(subBuilder);
            EmotePackDeleted = subBuilder;
            break;
          }
          case 34: {
            global::Harmony.Emote.V1.EmotePackEmotesUpdated subBuilder = new global::Harmony.Emote.V1.EmotePackEmotesUpdated();
            if (eventCase_ == EventOneofCase.EmotePackEmotesUpdated) {
              subBuilder.MergeFrom(EmotePackEmotesUpdated);
            }
            input.ReadMessage(subBuilder);
            EmotePackEmotesUpdated = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
